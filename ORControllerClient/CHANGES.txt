Version 0.7.1
=============

- Fixed : control commands do not work over HTTPS or with controllers requiring authentication.

Version 0.7
===========

- Added ORControllerDeviceModel and dependant classes to represent controller configuration,
  added methods on ORController to retrieve it (requires controller with extended API, ORCJAVA-492)
- Internal refactoring on ORSensorPollingManager to support new ORControllerDeviceModel
- Updated sample application to show example of using new API
- All model classes are now NSCoding compliant
- Updated for Xcode 7, all unit tests are now XCTests
- Fixed : Multiple polling thread could be started for same ORSensorPollingManager

Version 0.6
===========

- Added ORScreenOrGroupReference class to represent a specific screen or group.
- Added utility methods on Definition to find first ORScreenOrGroupReference in model.

Version 0.5
===========

- Removed anything to do with "local commands", the mechanism was never fully implemented
- Added auto-discovery mechanism in the client library.
  Please check the ORControllerBrowser class documentation for futher details.
  The sample application is also updated to showcase using that mechanism.

Version 0.4.2
=============

Bug fixes
---------

- Fixed : KVO notifications for changes on ORSlider value where not correctly sent

Version 0.4.1
=============

- When connecting to the controller, re-start polling if a panel definition is alread attached to the controller.

Bug fixes
---------

- ensure a unique ID is sent when polling for sensor values
- control REST calls where incorrectly using GET instead of POST
- fixed a memory leak in the sensor polling code
- fixed failing unit tests

Version 0.4.0
=============

Added
- (void)retrieveResourceNamed:(NSString *)resourceName successHandler:(void (^)(NSData *))successHandler errorHandler:(void (^)(NSError *))errorHandler;
method on ORController to retrieve a resource (images for now), encapsulating the HTTP call required to do it.

Reviewed threads/queues usage in the library to ensure network calls are always appropriately performed in the background.
This has an important impact for the client of the library: property updates on the model are not performed on the main thread.
This means that any KVO observer method is not guaranteed to be called on the main thread.
It is the responsibility of the client to re-direct code to the main thread if required (e.g. when updating UI based on a model change).
The sample application has been updated to corretly handle this situation.

ORSwitch.h was incorrectly not made public for clients of the library to use. This is now fixed.

ORColorPicker did not expose the control method yet, added it : - (void)sendColor:(UIColor *)color;

Version 0.3.0
=============

New features
------------

Continued conversion from all legacy model objects (except for "local commands" mechanism) to newer version.
This includes: ORSwitch, ORSlider, ORColorPicker, ORWebView, ORTabBar / ORTabBarItem, ORNavigation,
ORScreen, ORGroup, ORGesture, ORLayoutContainer, ORAbsoluteLayoutContainer, ORGridLayoutContainer, ORGridCell

Please see the detailed documentation of each class for more information.

Introduced ORModelObject as base class for all objects that are part of the panel object model.
definition property has been moved from ORWidget to ORModelObject.
This class also defines a name property that, for most objects, can be used freely by the client.
For ORScreen and ORGroup, it is pre-populated by the value that has been defined in the model.
For ORLabel, it is pre-populated with the text of the label as it is defined before any sensor update occur.

Changes from previous release
-----------------------------

On ORImage, renamed property 'name' to 'src', allowing addition of name as generic property on ORModelObject.

ORButton now references new ORNavigation object (instead of Navigation).

Removed isDynamic property from ORLabel/ORButton. It was never implemented correctly.

Fixed sensor update issue introduced in latest release.

Internal review to ensure better compatibility with iOS 7.1 / 64bit support

Version 0.2.0
=============

Added ORImage object representing images (replaces legacy Image model object).
- (NSSet *)images method on Definition returns all the images that are part of the design.

Added ORButton object representing a push button (no state feedback).
ORButton replaces legacy Button object.
ORButton object handles communication with controller.
UI code should use -press and -depress method to indicate when user taps and releases button.
- (NSSet *)buttons method on Definition returns all the buttons that are part of the design.

Added ORBackground object representing background of Screen (replaces legacy Background model object).
Screen is still a legacy model object and will be replaced in the future.

ORWidgets have a reference to the Definition they are a part of.

Fixed bug that would not take sensor states information from ORWidget (label or image) into account.

On Definition, method - (ORLabel *)findLabelById:(int)labelId is deprecated.
Method - (ORLabel *)findLabelByIdentifier:(ORObjectIdentifier *)identifier should be used instead.

Version 0.1.3
=============

Authentication manager is now also responsible to validate certificate.
Updated sample application to demonstrate that. 

Version 0.1.2
=============

Added authentication support to the client library.
Updated sample application to support authentication.
Fixed some import issues in sample project.

Version 0.1.1
=============

Some internal refactoring, that lead to inclusion of categories in the client library.
This implies that clients using the library must now force loading of those categories e.g. using the -all_load flag (or -force_load).

Updated ORLabel to include font and color in addition to text.

Version 0.1.0
=============

Initial public release